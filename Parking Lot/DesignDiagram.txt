# Parking Lot Management System - Design Diagram


## Class Structure and Relationships

### Core Domain Objects

1. **Vehicle (Interface)**
   - Defines the contract for any vehicle that can be parked
   - Methods: getRegistrationNumber(), getColor()

2. **Car (Class)**
   - Implements Vehicle interface
   - Properties: registrationNumber, color
   - Represents a concrete vehicle type that can be parked

3. **Slot (Class)**
   - Represents a parking slot in the parking lot
   - Properties: slotNumber, isOccupied, parkedVehicle
   - Methods: assignVehicle(), removeVehicle(), getParkedVehicle(), etc.
   - Contains deprecated methods for backward compatibility (assignCar, removeCar, getParkedCar)

4. **Ticket (Class)**
   - Represents a parking ticket issued when a vehicle is parked
   - Properties: slotNumber, vehicle
   - Methods: getSlotNumber(), getVehicle()
   - Contains deprecated methods for backward compatibility (getCar)

### Service Interfaces

5. **ParkingService (Interface)**
   - Defines core parking operations
   - Methods: initialize(), parkVehicle(), freeSlot()

6. **SearchService (Interface)**
   - Defines search operations for the parking lot
   - Methods: findRegistrationNumbersByColor(), findSlotNumbersByColor(), findSlotByRegistrationNumber(), getStatus()

7. **SlotManager (Interface)**
   - Defines slot management operations
   - Methods: createSlots(), findNearestAvailableSlot(), getSlotByNumber(), getAllSlots()

### Implementations

8. **DefaultSlotManager (Class)**
   - Implements SlotManager interface
   - Uses Singleton pattern to ensure only one instance exists
   - Manages the creation and allocation of parking slots

9. **ParkingLotImpl (Class)**
   - Implements both ParkingService and SearchService interfaces
   - Central implementation that coordinates between slot management and ticket issuance
   - Handles parking operations and search functionalities

10. **ParkingLot (Class)**
    - Legacy class with direct implementation (not using interfaces)
    - Contains similar functionality to ParkingLotImpl but without the separation of concerns

11. **Main (Class)**
    - Entry point of the application
    - Handles user input and command processing
    - Coordinates between services to execute user commands

## Design Patterns Used

1. **Singleton Pattern**
   - Implemented in DefaultSlotManager to ensure only one instance manages all slots
   - Provides global access point through getInstance() method

2. **Interface Segregation**
   - Separate interfaces (ParkingService, SearchService) for different functionalities
   - Allows clients to depend only on the interfaces they use

3. **Dependency Injection**
   - SlotManager is injected into ParkingLotImpl constructor
   - Promotes loose coupling and easier testing

